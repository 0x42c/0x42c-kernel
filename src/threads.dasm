; 0x42c-kernel thread management code.
; Licensed with the MIT license.

; Returns the current executing thread ID in A
get_current_thread_id:
    IFE [current_thread_index], 0xFFFE
        SET PC, .new_thread
    SET A, [current_thread_index]
    MUL A, 8
    ADD A, thread_table
    SET A, [A]
    SET PC, POP
.new_thread:
    SET A, [next_thread_id]
    SET PC, POP

kill_current_thread:
    SUB PC, 1 ; TODO

; A: Pointer to thread; B: Stack size; C: Thread flags
; Thread begins after next context switch
; Returns thread ID in A, or -1 if thread creation failed.
.equ required_system_stack 16 ; Minimum is 11, 16 is nice and round
start_thread:
    SET PUSH, [context_switch_enabled] ; Back up current context switch state
    SET [context_switch_enabled], 0
    SET PUSH, C
    SET PUSH, A

    SET C, [active_threads]
    IFE C, max_threads
        SET PC, .max_threads_reached
    MUL C, 8
    ADD C, thread_table

    ; Allocate the stack memory
    SET A, B
    IFL A, 0xFFFF - required_system_stack
        ADD A, required_system_stack ; Required system stack for context switching and other tasks
    SET PUSH, A
    
    SET PUSH, C
    SET PUSH, [current_thread_index]
        SET [current_thread_index], 0xFFFE ; special value used by get_current_thread_id
        JSR alloc_mem
    SET [current_thread_index], POP
    SET C, POP
    
    ADD A, POP ; Move stack pointer to end of stack
    SUB A, 2
    SET [A], PEEK ; Set return point
    SET [A + 1], kill_current_thread
    SUB A, 10 ; Move stack pointer to allow space for registers
    SET [A], system_interrupt_return
    SET PUSH, A

    SET [C + 0x0000], [next_thread_id] ; ID
    SET [C + 0x0002], POP ; Stack pointer 
    SET [C + 0x0001], POP ; Pointer to thread
    SET [C + 0x0003], POP ; Thread flags
    SET [C + 0x0004], 0xffff ; TODO: File path
    SET [C + 0x0005], 0 ; TODO: Parent
   ;SET [C + 0x0006], 0 ; Reserved for future use
   ;SET [C + 0x0007], 0 ; Reserved for future use

    SET A, [next_thread_id]
    ADD [active_threads], 1
    JSR find_next_thread_id
    SET [context_switch_enabled], POP
    SET PC, POP
.max_threads_reached:
    ADD SP, 2 ; POP / POP
    SET [context_switch_enabled], POP
    SET A, -1
    SET PC, POP
    
find_next_thread_id:
    ADD [next_thread_id], 1 ; TODO: Ensure this ID isn't in use
    SET PC, POP

; Handles context switching for multitasking; should never be called manually
; Switches context to next thread and returns
context_switch:
    IFE [context_switch_enabled], 0
        SET PC, POP
    ; Back up stack pointer
    SET A, [current_thread_index]
    MUL A, 8
    ADD A, thread_table + 2 ; Stack pointer address
    
    SET [A], SP

context_switch_next_thread:
    ; TODO: Suspended threads
    SET A, [current_thread_index]
    ADD A, 1
    IFE A, [active_threads]
        SET A, 0
    SET [current_thread_index], A
    
    ; Set new stack pointer and return
    MUL A, 8
    ADD A, thread_table + 2
    SET SP, [A]
    SET PC, POP