; 0x42c-kernel thread management code.
; Licensed with the MIT license.

; Returns the current executing thread ID in A
get_current_thread_id:
    SET A, [current_thread_index]
    MUL A, 8
    ADD A, thread_table
    SET A, [A]
    SET PC, POP

; A: Pointer to thread; B: Stack size
; Thread begins after next context switch
; Returns thread ID in A, or -1 if thread creation failed.
start_thread:
	SET [context_switch_enabled], 0
    SET PUSH, A

	SET C, [active_threads]
	IFE C, max_threads
		SET PC, .max_threads_reached
	MUL C, 8
	ADD C, thread_table

    ; Allocate the stack memory
    SET A, B
    JSR alloc_mem
    SET PUSH, A

    ADD [active_threads], 1
    SET [C + 0x0000], [active_threads] ; ID
    SET [C + 0x0002], POP ; Stack pointer 
    SET [C + 0x0001], POP ; Pointer to thread
    SET [C + 0x0003], 0 ; TODO: Flags
    SET [C + 0x0004], 0xffff ; TODO: File path
    SET [C + 0x0005], 0 ; TODO: Parent
    SET [C + 0x0006], 0 ; Reserved
    SET [C + 0x0007], 0 ; Reserved

	SET [context_switch_enabled], 1
    SET A, [active_threads]
	SET PC, POP
.max_threads_reached:
	SET [context_switch_enabled], 1
	SET A, -1
	SET PC, POP

; Handles context switching for multitasking; should never be called manually
; Switches context to next thread and returns
context_switch:
	IFE [context_switch_enabled], 0
    	SET PC, POP
	SET PC, POP
